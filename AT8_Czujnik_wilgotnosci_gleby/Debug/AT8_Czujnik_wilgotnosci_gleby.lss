
AT8_Czujnik_wilgotnosci_gleby.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000112  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068d  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ad  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b8  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036b  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006f  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	0b d0       	rcall	.+22     	; 0x5a <main>
  44:	2a c0       	rjmp	.+84     	; 0x9a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_14>:

/*
 Funkcja obs³ugi przewania ADC - koniec przetwarzania
*/
void ADC_vect(void){
	ADC_Conv_result = my_ADC_Result();
  48:	21 d0       	rcall	.+66     	; 0x8c <my_ADC_Result>
  4a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  4e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	ADCSRA |= 1 << ADIF;					// Wyzerowanie rz¹dania przerwania
  52:	86 b1       	in	r24, 0x06	; 6
  54:	80 61       	ori	r24, 0x10	; 16
  56:	86 b9       	out	0x06, r24	; 6
  58:	08 95       	ret

0000005a <main>:
}

int main(void)
{
    
	my_ADC_Setup();
  5a:	05 d0       	rcall	.+10     	; 0x66 <my_ADC_Setup>
	
	sei();					// Global Interrupt Enable
  5c:	78 94       	sei

void my_ADC_Setup(void);

uint16_t my_ADC_Result(void);

static inline void my_ADC_Start(void){ ADCSRA |= 1 << ADSC; }
  5e:	86 b1       	in	r24, 0x06	; 6
  60:	80 64       	ori	r24, 0x40	; 64
  62:	86 b9       	out	0x06, r24	; 6
  64:	ff cf       	rjmp	.-2      	; 0x64 <main+0xa>

00000066 <my_ADC_Setup>:
 */ 

#include "my_ADC.h"

void my_ADC_Setup(void){
	ADCSRA |= 1 << ADEN;										// ADC Enable
  66:	86 b1       	in	r24, 0x06	; 6
  68:	80 68       	ori	r24, 0x80	; 128
  6a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= 1 << ADIE;										// ADC Interrupt Enable -> end of conversion
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);		// Prescaler -> 128
  72:	86 b1       	in	r24, 0x06	; 6
  74:	87 60       	ori	r24, 0x07	; 7
  76:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= 1 << ADFR;										// Free Running Mode -> Praca ci¹g³a
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	86 b9       	out	0x06, r24	; 6
	ADMUX |= 1 << REFS0;										// Voltage reference -> AVcc
  7e:	87 b1       	in	r24, 0x07	; 7
  80:	80 64       	ori	r24, 0x40	; 64
  82:	87 b9       	out	0x07, r24	; 7
  84:	86 b1       	in	r24, 0x06	; 6
  86:	80 64       	ori	r24, 0x40	; 64
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <my_ADC_Result>:

uint16_t my_ADC_Result(void){
    uint16_t loval = 0;
    uint16_t hival = 0;
    uint16_t result = 0;
    loval = ADCL;
  8c:	24 b1       	in	r18, 0x04	; 4
    hival = ADCH;
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	90 e0       	ldi	r25, 0x00	; 0
    result = (hival<<8) | loval; 
  92:	98 2f       	mov	r25, r24
  94:	88 27       	eor	r24, r24
    return result;
  96:	82 2b       	or	r24, r18
  98:	08 95       	ret

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
