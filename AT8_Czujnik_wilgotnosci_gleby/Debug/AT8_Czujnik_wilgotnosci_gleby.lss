
AT8_Czujnik_wilgotnosci_gleby.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a86  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000753  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000495  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000303  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__vector_14>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	3b d0       	rcall	.+118    	; 0xba <main>
  44:	c4 c0       	rjmp	.+392    	; 0x1ce <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <Map_Result>:
#include "my_7seg.h"

uint8_t Map_Result(uint16_t Result){
	uint8_t Mapped_Result = (99 / 670) * Result;
	return Mapped_Result;
}
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	08 95       	ret

0000004c <__vector_14>:


/*
 Funkcja obs³ugi przewania ADC - koniec przetwarzania
*/
void ADC_vect(void){
  4c:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){						// Czasowe zablokowanie przerwañ
  4e:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  50:	f8 94       	cli
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	05 c0       	rjmp	.+10     	; 0x60 <__vector_14+0x14>
		uint16_t Result = my_ADC_Result();
  56:	b4 d0       	rcall	.+360    	; 0x1c0 <my_ADC_Result>
		Soil_Hum = Map_Result(Result);
  58:	f7 df       	rcall	.-18     	; 0x48 <Map_Result>
  5a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Soil_Hum>

/*
 Funkcja obs³ugi przewania ADC - koniec przetwarzania
*/
void ADC_vect(void){
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){						// Czasowe zablokowanie przerwañ
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	81 11       	cpse	r24, r1
  62:	f9 cf       	rjmp	.-14     	; 0x56 <__vector_14+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  64:	cf bf       	out	0x3f, r28	; 63
		uint16_t Result = my_ADC_Result();
		Soil_Hum = Map_Result(Result);
	}														// Odblokowanie przerwañ
	ADCSRA |= 1 << ADIF;									// Wyzerowanie rz¹dania przerwania
  66:	86 b1       	in	r24, 0x06	; 6
  68:	80 61       	ori	r24, 0x10	; 16
  6a:	86 b9       	out	0x06, r24	; 6
}
  6c:	cf 91       	pop	r28
  6e:	08 95       	ret

00000070 <__vector_3>:

/*
 Funkcja obs³ugi przewania TIMER2 od porównania
*/
void TIMER2_COMP_vect(void){
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
	static uint8_t Status;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){						// Czasowe zablokowanie przerwañ
  74:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  76:	f8 94       	cli
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	19 c0       	rjmp	.+50     	; 0xae <__vector_3+0x3e>
		if(Status != 1){
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	59 f0       	breq	.+22     	; 0x9a <__vector_3+0x2a>
			uint8_t Dzies = my_7seg_Dzies(Soil_Hum);
  84:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Soil_Hum>
  88:	33 d0       	rcall	.+102    	; 0xf0 <my_7seg_Dzies>
  8a:	c8 2f       	mov	r28, r24
			my_7seg_DISPLAY1();
  8c:	47 d0       	rcall	.+142    	; 0x11c <my_7seg_DISPLAY1>
			my_7seg_DISPLAY_NUMBER(Dzies);
  8e:	8c 2f       	mov	r24, r28
  90:	53 d0       	rcall	.+166    	; 0x138 <my_7seg_DISPLAY_NUMBER>
			Status = 1;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  98:	09 c0       	rjmp	.+18     	; 0xac <__vector_3+0x3c>
		} else {
			uint8_t Jedn = my_7seg_Jedn(Soil_Hum);
  9a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Soil_Hum>
  9e:	30 d0       	rcall	.+96     	; 0x100 <my_7seg_Jedn>
  a0:	c8 2f       	mov	r28, r24
			my_7seg_DISPLAY2();
  a2:	43 d0       	rcall	.+134    	; 0x12a <my_7seg_DISPLAY2>
			my_7seg_DISPLAY_NUMBER(Jedn);
  a4:	8c 2f       	mov	r24, r28
  a6:	48 d0       	rcall	.+144    	; 0x138 <my_7seg_DISPLAY_NUMBER>
			Status = 0;
  a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  ac:	80 e0       	ldi	r24, 0x00	; 0
/*
 Funkcja obs³ugi przewania TIMER2 od porównania
*/
void TIMER2_COMP_vect(void){
	static uint8_t Status;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){						// Czasowe zablokowanie przerwañ
  ae:	81 11       	cpse	r24, r1
  b0:	e5 cf       	rjmp	.-54     	; 0x7c <__vector_3+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  b2:	df bf       	out	0x3f, r29	; 63
		}
		}													// Odblokowanie przerwañ
	/* 
		Wyzerowanie rz¹dania przerwania nastêpuje automatycznie po wykonianiu obs³ugi przerwania
	*/
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <main>:

int main(void)
{
    
	my_ADC_Setup();
  ba:	6f d0       	rcall	.+222    	; 0x19a <my_ADC_Setup>
	my_7seg_GPIO_CONF();
  bc:	12 d0       	rcall	.+36     	; 0xe2 <my_7seg_GPIO_CONF>
	TIMER2_CONF();			// Czy to dobre miejsce?
  be:	05 d0       	rcall	.+10     	; 0xca <TIMER2_CONF>
	
	sei();					// Global Interrupt Enable
  c0:	78 94       	sei

void my_ADC_Setup(void);

uint16_t my_ADC_Result(void);

static inline void my_ADC_Start(void){ ADCSRA |= 1 << ADSC; }
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0xe>

000000ca <TIMER2_CONF>:
 */ 

#include "my_7seg.h"

void TIMER2_CONF(void){
	TCCR2 |= 1 << WGM21;									// CTC
  ca:	85 b5       	in	r24, 0x25	; 37
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20);		// Prescaler -> clk/1024
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	85 bd       	out	0x25, r24	; 37
	OCR2 = 109;												// Górna wartoœæ licznika
  d6:	8d e6       	ldi	r24, 0x6D	; 109
  d8:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 1 << OCF2;										// W³¹czenie przerwania od porównania 
  da:	89 b7       	in	r24, 0x39	; 57
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	89 bf       	out	0x39, r24	; 57
  e0:	08 95       	ret

000000e2 <my_7seg_GPIO_CONF>:
}	

void my_7seg_GPIO_CONF(void){
	DDRB = 0x06;											// PB1 i PB2 -> output
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
  e6:	18 ba       	out	0x18, r1	; 24
	DDRD = 0x7F;											// PD0 - PD6 -> output
  e8:	8f e7       	ldi	r24, 0x7F	; 127
  ea:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  ec:	12 ba       	out	0x12, r1	; 18
  ee:	08 95       	ret

000000f0 <my_7seg_Dzies>:
}

uint8_t my_7seg_Dzies(uint8_t Number){
	return Number / 10;
  f0:	9d ec       	ldi	r25, 0xCD	; 205
  f2:	89 9f       	mul	r24, r25
  f4:	81 2d       	mov	r24, r1
  f6:	11 24       	eor	r1, r1
}
  f8:	86 95       	lsr	r24
  fa:	86 95       	lsr	r24
  fc:	86 95       	lsr	r24
  fe:	08 95       	ret

00000100 <my_7seg_Jedn>:

uint8_t my_7seg_Jedn(uint8_t Number){
	return Number % 10;
 100:	9d ec       	ldi	r25, 0xCD	; 205
 102:	89 9f       	mul	r24, r25
 104:	91 2d       	mov	r25, r1
 106:	11 24       	eor	r1, r1
 108:	96 95       	lsr	r25
 10a:	96 95       	lsr	r25
 10c:	96 95       	lsr	r25
 10e:	99 0f       	add	r25, r25
 110:	29 2f       	mov	r18, r25
 112:	22 0f       	add	r18, r18
 114:	22 0f       	add	r18, r18
 116:	92 0f       	add	r25, r18
}
 118:	89 1b       	sub	r24, r25
 11a:	08 95       	ret

0000011c <my_7seg_DISPLAY1>:

static inline void my_7seg_DIPLAY1_OFF(void){	PORTB |= 1 << Disp1;		}

static inline void my_7seg_DIPLAY2_ON(void){	PORTB &= ~(1 << Disp2);		}

static inline void my_7seg_DIPLAY2_OFF(void){	PORTB |= 1 << Disp2;		}
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	88 bb       	out	0x18, r24	; 24

uint8_t my_7seg_Jedn(uint8_t Number){
	return Number % 10;
}

static inline void my_7seg_DIPLAY1_ON(void){	PORTB &= ~(1 << Disp1);		}
 122:	88 b3       	in	r24, 0x18	; 24
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	88 bb       	out	0x18, r24	; 24
 128:	08 95       	ret

0000012a <my_7seg_DISPLAY2>:

static inline void my_7seg_DIPLAY1_OFF(void){	PORTB |= 1 << Disp1;		}
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	88 bb       	out	0x18, r24	; 24

static inline void my_7seg_DIPLAY2_ON(void){	PORTB &= ~(1 << Disp2);		}
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	88 bb       	out	0x18, r24	; 24
 136:	08 95       	ret

00000138 <my_7seg_DISPLAY_NUMBER>:
	my_7seg_DIPLAY1_OFF();
	my_7seg_DIPLAY2_ON();
}

void my_7seg_DISPLAY_NUMBER(uint8_t Number){
    if(Number == 0){ PORTD = 0b0001000; }
 138:	81 11       	cpse	r24, r1
 13a:	03 c0       	rjmp	.+6      	; 0x142 <my_7seg_DISPLAY_NUMBER+0xa>
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	82 bb       	out	0x12, r24	; 18
 140:	08 95       	ret
    else if(Number == 1){ PORTD = 0b1011110; }
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <my_7seg_DISPLAY_NUMBER+0x14>
 146:	8e e5       	ldi	r24, 0x5E	; 94
 148:	82 bb       	out	0x12, r24	; 18
 14a:	08 95       	ret
    else if(Number == 2){ PORTD = 0b0010001; }
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	19 f4       	brne	.+6      	; 0x156 <my_7seg_DISPLAY_NUMBER+0x1e>
 150:	81 e1       	ldi	r24, 0x11	; 17
 152:	82 bb       	out	0x12, r24	; 18
 154:	08 95       	ret
    else if(Number == 3){ PORTD = 0b0010100; }
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	19 f4       	brne	.+6      	; 0x160 <my_7seg_DISPLAY_NUMBER+0x28>
 15a:	84 e1       	ldi	r24, 0x14	; 20
 15c:	82 bb       	out	0x12, r24	; 18
 15e:	08 95       	ret
    else if(Number == 4){ PORTD = 0b1000110; }
 160:	84 30       	cpi	r24, 0x04	; 4
 162:	19 f4       	brne	.+6      	; 0x16a <my_7seg_DISPLAY_NUMBER+0x32>
 164:	86 e4       	ldi	r24, 0x46	; 70
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
    else if(Number == 5){ PORTD = 0b0100100; }
 16a:	85 30       	cpi	r24, 0x05	; 5
 16c:	19 f4       	brne	.+6      	; 0x174 <my_7seg_DISPLAY_NUMBER+0x3c>
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	82 bb       	out	0x12, r24	; 18
 172:	08 95       	ret
    else if(Number == 6){ PORTD = 0b0100000; }
 174:	86 30       	cpi	r24, 0x06	; 6
 176:	19 f4       	brne	.+6      	; 0x17e <my_7seg_DISPLAY_NUMBER+0x46>
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret
    else if(Number == 7){ PORTD = 0b0011110; }
 17e:	87 30       	cpi	r24, 0x07	; 7
 180:	19 f4       	brne	.+6      	; 0x188 <my_7seg_DISPLAY_NUMBER+0x50>
 182:	8e e1       	ldi	r24, 0x1E	; 30
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret
    else if(Number == 8){ PORTD = 0b0000000; }
 188:	88 30       	cpi	r24, 0x08	; 8
 18a:	11 f4       	brne	.+4      	; 0x190 <my_7seg_DISPLAY_NUMBER+0x58>
 18c:	12 ba       	out	0x12, r1	; 18
 18e:	08 95       	ret
    else if(Number == 9){ PORTD = 0b0000100; }
 190:	89 30       	cpi	r24, 0x09	; 9
 192:	11 f4       	brne	.+4      	; 0x198 <my_7seg_DISPLAY_NUMBER+0x60>
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	82 bb       	out	0x12, r24	; 18
 198:	08 95       	ret

0000019a <my_ADC_Setup>:
 */ 

#include "my_ADC.h"

void my_ADC_Setup(void){
	ADCSRA |= 1 << ADEN;										// ADC Enable
 19a:	86 b1       	in	r24, 0x06	; 6
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= 1 << ADIE;										// ADC Interrupt Enable -> end of conversion
 1a0:	86 b1       	in	r24, 0x06	; 6
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);		// Prescaler -> 128
 1a6:	86 b1       	in	r24, 0x06	; 6
 1a8:	87 60       	ori	r24, 0x07	; 7
 1aa:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= 1 << ADFR;										// Free Running Mode -> praca ci¹g³a
 1ac:	86 b1       	in	r24, 0x06	; 6
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	86 b9       	out	0x06, r24	; 6
	ADMUX |= 1 << REFS0;										// Voltage reference -> AVcc
 1b2:	87 b1       	in	r24, 0x07	; 7
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	87 b9       	out	0x07, r24	; 7
 1b8:	86 b1       	in	r24, 0x06	; 6
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	86 b9       	out	0x06, r24	; 6
 1be:	08 95       	ret

000001c0 <my_ADC_Result>:

uint16_t my_ADC_Result(void){
    uint16_t loval = 0;
    uint16_t hival = 0;
    uint16_t result = 0;
    loval = ADCL;
 1c0:	24 b1       	in	r18, 0x04	; 4
    hival = ADCH;
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	90 e0       	ldi	r25, 0x00	; 0
    result = (hival<<8) | loval; 
 1c6:	98 2f       	mov	r25, r24
 1c8:	88 27       	eor	r24, r24
    return result;
 1ca:	82 2b       	or	r24, r18
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
