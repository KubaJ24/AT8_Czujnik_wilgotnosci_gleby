
AT8_Czujnik_wilgotnosci_gleby.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000000fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000057f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f0  00000000  00000000  0000071f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000215  00000000  00000000  00000c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000335  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	25 c0       	rjmp	.+74     	; 0x5e <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1c d0       	rcall	.+56     	; 0x7c <main>
  44:	1f c0       	rjmp	.+62     	; 0x84 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <PC0_Output_Setup>:
TIMER0 przepe³nia siê co 0,016s
*/
void TIMER0_Setup(void);

void PC0_Output_Setup(void){
	DDRC = 0x01;			// PC0 -> Output
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0;				// PC0 -> Low level
  4c:	15 ba       	out	0x15, r1	; 21
  4e:	08 95       	ret

00000050 <TIMER0_Setup>:
}

void TIMER0_Setup(void){
	TCCR0 |= (1 << CS02) | (1 << CS00);						// Clock -> clk/1024
  50:	83 b7       	in	r24, 0x33	; 51
  52:	85 60       	ori	r24, 0x05	; 5
  54:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;									// TIMER0 Overflow Interrupt Enable
  56:	89 b7       	in	r24, 0x39	; 57
  58:	81 60       	ori	r24, 0x01	; 1
  5a:	89 bf       	out	0x39, r24	; 57
  5c:	08 95       	ret

0000005e <__vector_9>:
Procedura obs³ugi przerwania TIMER0 od przepe³nienia
Program wykonuje pêtlê 50 przepe³nieñ po czym zmienia stan diody PC0
*/
void TIMER0_OVF_vect(void){
	static uint8_t Counter = 0;
	if(Counter < 50){
  5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  62:	82 33       	cpi	r24, 0x32	; 50
  64:	20 f4       	brcc	.+8      	; 0x6e <__vector_9+0x10>
		Counter++;
  66:	8f 5f       	subi	r24, 0xFF	; 255
  68:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  6c:	08 95       	ret
	} else {
		Counter = 0;
  6e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTC ^= 1 << PC0_Led;		// Zmiana stanu diody na przeciwny
  72:	95 b3       	in	r25, 0x15	; 21
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	89 27       	eor	r24, r25
  78:	85 bb       	out	0x15, r24	; 21
  7a:	08 95       	ret

0000007c <main>:
}

int main(void)
{
	
	PC0_Output_Setup();
  7c:	e5 df       	rcall	.-54     	; 0x48 <PC0_Output_Setup>
	TIMER0_Setup();
  7e:	e8 df       	rcall	.-48     	; 0x50 <TIMER0_Setup>
	
    sei();					// Global Interrupt Enable
  80:	78 94       	sei
  82:	ff cf       	rjmp	.-2      	; 0x82 <main+0x6>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>
